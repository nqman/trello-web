import Box from '@mui/material/Box'
import { mapOrder } from '~/utils/sorts'
import ListColumns from './ListColumns/ListColumns'

import {
  DndContext,
  // PointerSensor,
  MouseSensor,
  TouchSensor,
  useSensor,
  useSensors,
  DragOverlay,
  defaultDropAnimationSideEffects,
  closestCorners
} from '@dnd-kit/core'
import { arrayMove } from '@dnd-kit/sortable'
import { useEffect, useState } from 'react'
import { cloneDeep } from 'lodash'

import Column from './ListColumns/Column/Column'
import Card from './ListColumns/Column/ListCards/Card/Card'

const ACTIVE_DRAG_ITEM_TYPE = {
  COLUMN: 'ACTIVE_DRAG_ITEM_TYPE_COLUMN',
  CARD: 'ACTIVE_DRAG_ITEM_TYPE_CARD'
}
function BoardContent({ board }) {
  // Require the mouse to move by 10 pixels before activating
  //N·∫øu d√πng PointerSensor m·∫∑c ƒë·ªãnh th√¨ ph·∫£i k·∫øt h·ª£p thu·ªôc t√≠nh css touch-action: none ·ªü nh·ªØng ph·∫ßn t·ª´ k√©o th·∫£.-nh∆∞ng m√† c√≤n bug
  // const pointerSensor = useSensor(PointerSensor, {
  //   activationConstraint: { distance: 10 }
  // })
  const mouseSensor = useSensor(MouseSensor, {
    activationConstraint: { distance: 10 }
  })
  // Press delay of 250ms, with tolerance of 500px of movement
  const touchSensor = useSensor(TouchSensor, {
    activationConstraint: {
      delay: 250,
      tolerance: 500
    }
  })
  // const sensors = useSensors(pointerSensor)
  //∆Øu ti√™n s·ª≠ d·ª•ng k·∫øt h·ª£p 2 lo·∫°i sensors l√† mouse v√† touch ƒë·ªÉ c√≥ tr·∫£i nghi·ªám tr√™n mobile t·ªët nh·∫•t, kh√¥ng b·ªã bug
  const sensors = useSensors(mouseSensor, touchSensor)
  const [orderedColumns, setOrderedColumns] = useState([])
  const [orderedCards, setOrderedCards] = useState([])

  //C√πng m·ªôt th·ªùi ƒëi·ªÉm ch·ªâ c√≥ m·ªôt ph·∫ßn t·ª≠ ƒëang ƒë∆∞·ª£c k√©o (column ho·∫∑c card)
  const [activeDragItemId, setActiveDragItemId] = useState(null)
  const [activeDragItemType, setActiveDragItemType] = useState(null)
  const [activeDragItemData, setActiveDragItemData] = useState(null)
  const [oldColumnWhenDraggingCard, setOldColumnWhenDraggingCard] =
    useState(null)

  useEffect(() => {
    setOrderedColumns(mapOrder(board?.columns, board?.columnOrderIds, '_id'))
  }, [board])
  //t√¨m m·ªôt Column theo CardId
  const findColumnByCardId = (cardId) => {
    // N√™n d√πng c.cards thay v√¨ c.cardOderIds v√¨ ·ªü b∆∞·ªõc handleDragOver ch√∫ng ta s·∫Ω l√†m d·ªØ li·ªáu cho cards ho√†n ch·ªânh tr∆∞·ªõc r·ªìi m·ªõi t·∫°o ra cardOrderIds m·ªõi
    return orderedColumns.find((column) =>
      column?.cards?.map((card) => card._id)?.includes(cardId)
    )
  }
  //trigger khi b·∫Øt ƒë·∫ßu k√©o(drag) m·ªôt ph·∫ßn t·ª≠
  const handleDragStart = (e) => {
    // console.log('üöÄ ~ handleDragStart ~ e:', e)
    setActiveDragItemId(e?.active?.id)
    setActiveDragItemType(
      e?.active?.data?.current?.columnId
        ? ACTIVE_DRAG_ITEM_TYPE.CARD
        : ACTIVE_DRAG_ITEM_TYPE.COLUMN
    )
    setActiveDragItemData(e?.active?.data?.current)

    // N·∫øu k√©o Card th√¨ m·ªõi th·ª±c hi·ªán h√†nh ƒë·ªông set gi√° tr·ªã oldColumn
    if (e?.active?.data?.current?.columnId) {
      setOldColumnWhenDraggingCard(findColumnByCardId(e?.active?.id))
    }
  }
  //trong qu√° tr√¨nh k√©o m·ªôt ph·∫ßn t·ª≠
  const handleDragOver = (event) => {
    // console.log(event)
    //kh√¥ng x·ª≠ l√≠ n·∫øu k√©o Column
    if (activeDragItemType == ACTIVE_DRAG_ITEM_TYPE.COLUMN) return
    //
    const { active, over } = event
    // Ki·ªÉm tra n·∫øu kh√¥ng t·ªìn t·∫°i active ho·∫∑c over (k√©o ra ngo√†i container th√¨ return lu√¥n tr√°nh l·ªói)
    if (!active || !over) return

    //activeDraggingCard: l√† c√°i c·∫£d ƒëang ƒë∆∞·ª£c k√©o
    const {
      id: activeDraggingCardId,
      data: { current: activeDraggingCardData }
    } = active
    // overCard: l√† c√°i card ƒëang t∆∞∆°ng t√°c ·ªü d∆∞·ªõi so v·ªõi c√°i card ƒë∆∞·ª£c k√©o ·ªü tr√™n
    const { id: overCardId } = over
    //t√¨m 2 column c·ªßa cardId
    const activeColumn = findColumnByCardId(activeDraggingCardId)
    const overColumn = findColumnByCardId(overCardId)
    //N·∫øu kh√¥ng t·ªìn t·∫°i 1 trong 2 column th√¨ kh√¥ng l√†m g√¨ h·∫øt, tr√°nh crash trang web
    if (!activeColumn || !overColumn) return

    // X·ª≠ l√≠ logic ·ªü ƒë√¢y ch·ªâ khi k√©o card qua 2 column kh√°c nhau, c√≤n n·∫øu k√©o card trong ch√≠nh column ban ƒë·∫ßu c·ªßa n√≥ th√¨ kh√¥ng l√†m g√¨
    // V√¨ ƒë√¢y ƒëang l√† ƒëo·∫°n x·ª≠ l√Ω l√∫c k√©o (handleDragOver), c√≤n x·ª≠ l√Ω l√∫c k√©o xong th√¨ n√≥ ·ªü trong (handleDragEnd)
    if (activeColumn._id !== overColumn._id) {
      setOrderedColumns((prevColumns) => {
        // T√¨m index c·ªßa overCard trong column ƒë√≠ch(n∆°i m√† activeCard s·∫Øp ƒë∆∞·ª£c th·∫£)
        const overCardIndex = overColumn?.cards?.findIndex(
          (card) => card._id === overCardId
        )
        let newCardIndex
        const isBelowOverItem =
          active.rect.current.translated &&
          active.rect.current.translated.top > over.rect.top + over.rect.height
        const modifier = isBelowOverItem ? 1 : 0
        newCardIndex =
          overCardIndex >= 0
            ? overCardIndex + modifier
            : overColumn?.cards?.length + 1
        // clone m·∫£ng orderedColumns c≈© ra m·ªôt c√°i m·ªõi ƒë·ªÉ x·ª≠ l√Ω data r·ªìi return - c·∫≠p nh·∫≠t l·∫°i orderedColumns m·ªõi
        const nextColumns = cloneDeep(prevColumns)
        const nextActiveColumn = nextColumns.find(
          (column) => column._id === activeColumn._id
        )
        // console.log(
        //   'üöÄ ~ setOrderedColumns ~ nextActiveColumn:',
        //   nextActiveColumn
        // )
        const nextOverColumn = nextColumns.find(
          (column) => column._id === overColumn._id
        )
        // nextActiveColumn: Column c≈©
        if (nextActiveColumn) {
          //X√≥a card ·ªü column active (column c≈©)
          nextActiveColumn.cards = nextActiveColumn.cards.filter(
            (card) => card._id !== activeDraggingCardId
          )
          //C·∫≠p nh·∫≠t l·∫°i m·∫£ng cardOrderIds cho chu·∫©n d·ªØ li·ªáu
          nextActiveColumn.cardOrderIds = nextActiveColumn.cards.map(
            (card) => card._id
          )
        }
        //nextOverColumn: column m·ªõi
        if (nextOverColumn) {
          // Ki·ªÉm tra xem card ƒëang k√©o n√≥ c√≥ t·ªìn t·∫°i ·ªü overColumn ch∆∞a, n·∫øu c√≥ th√¨ c·∫ßn x√≥a n√≥ tr∆∞·ªõc
          nextOverColumn.cards = nextOverColumn.cards.filter(
            (card) => card._id !== activeDraggingCardId
          )
          //Th√™m card ƒëang k√©o v√†o overColumn teo v·ªã tr√≠ index m·ªõi
          nextOverColumn.cards = nextOverColumn.cards.toSpliced(
            newCardIndex,
            0,
            activeDraggingCardData
          )
          //C·∫≠p nh·∫≠t l·∫°i m·∫£ng cardOrderIds cho chu·∫©n d·ªØ li·ªáu
          nextOverColumn.cardOrderIds = nextOverColumn.cards.map(
            (card) => card._id
          )
        }
        return nextColumns
      })
    }
  }
  //trigger khi b·∫Øt ƒë·∫ßu th·∫£(drop) m·ªôt ph·∫ßn t·ª≠
  const handleDragEnd = (event) => {
    // console.log('üöÄ ~ handleDragEnd ~ event:', event)
    const { active, over } = event
    // Ki·ªÉm tra n·∫øu kh√¥ng t·ªìn t·∫°i over (k√©o ra ngo√†i th√¨ return lu√¥n tr√°nh l·ªói)
    if (!active || !over) return
    if (activeDragItemType === ACTIVE_DRAG_ITEM_TYPE.CARD) {
      //activeDraggingCard: l√† c√°i c·∫£d ƒëang ƒë∆∞·ª£c k√©o
      const {
        id: activeDraggingCardId,
        data: { current: activeDraggingCardData }
      } = active
      // overCard: l√† c√°i card ƒëang t∆∞∆°ng t√°c ·ªü d∆∞·ªõi so v·ªõi c√°i card ƒë∆∞·ª£c k√©o ·ªü tr√™n
      const { id: overCardId } = over
      //t√¨m 2 column c·ªßa cardId
      const activeColumn = findColumnByCardId(activeDraggingCardId)
      const overColumn = findColumnByCardId(overCardId)
      //N·∫øu kh√¥ng t·ªìn t·∫°i 1 trong 2 column th√¨ kh√¥ng l√†m g√¨ h·∫øt, tr√°nh crash trang web
      if (!activeColumn || !overColumn) return
      // D√πng oldColumnWhenDraggingCard._id (set v√†o state t·ª´ b∆∞·ªõc handleDragStart) ch·ª© kh√¥ng ph·∫£i activeData trong scope handleDragEnd v√¨ sau khi ƒëi qua onDragOver th√¨ state c·ªßa card ƒë√£ b·ªã  c·∫≠p nh·∫≠t m·ªôt l·∫ßn r·ªìi.
      //K√©o th·∫£ gi·ªØa card gi·ªØa 2 column kh√°c nhau
      if (oldColumnWhenDraggingCard._id !== overColumn._id) {
      } else {
        //K√©o th·∫£ gi·ªØa card gi·ªØa 2 column gi·ªëng nhau
        //l·∫•y v·ªã tr√≠ c≈© t·ª´ th·∫±ng oldColumnWhenDraggingCard
        const oldCardIndex = oldColumnWhenDraggingCard?.cards?.findIndex(
          (c) => c._id === activeDragItemId
        )
        //l·∫•y v·ªã tr√≠ m·ªõi t·ª´ th·∫≥ng over
        const newCardIndex = overColumn?.cards?.findIndex(
          (c) => c._id === overCardId
        )
        // D√πng arrayMove v√¨ k√©o card trong m·ªôt c√°i column th√¨ t∆∞∆°ng t·ª± v·ªõi logic k√©o column trong boardContent
        const dndOrderedColumns = arrayMove(
          oldColumnWhenDraggingCard?.cards,
          oldCardIndex,
          newCardIndex
        )
        setOrderedColumns((prevColumns) => {
          // clone m·∫£ng orderedColumns c≈© ra m·ªôt c√°i m·ªõi ƒë·ªÉ x·ª≠ l√Ω data r·ªìi return - c·∫≠p nh·∫≠t l·∫°i orderedColumns m·ªõi
          const nextColumns = cloneDeep(prevColumns)

          //T√¨m t·ªõi column ƒëang th·∫£
          const targetColumn = nextColumns.find(
            (column) => column._id === overColumn._id
          )
          //c·∫≠p nh·∫≠t l·∫°i gi√° trj m·ªõi l√† card v√† cardOrderIds trong targetColumn
          targetColumn.cards = dndOrderedColumns
          targetColumn.cardOrderIds = dndOrderedColumns.map((card) => card._id)
          console.log(targetColumn)

          //Tr·∫£ v·ªÅ gi√° trj state m·ªõi (chu·∫©n v·ªã tr√≠)
          return nextColumns
        })
      }
    }
    if (activeDragItemType === ACTIVE_DRAG_ITEM_TYPE.COLUMN) {
      console.log('Keo tha COLUMN')
      // N·∫øu v·ªã tr√≠ sau khi k√©o th·∫£ kh√°c v·ªõi v·ªã tr√≠ ban ƒë·∫ßu
      if (active.id !== over.id) {
        // console.log('keo tha')
        //l·∫•y v·ªã tr√≠ c≈© t·ª´ th·∫≥ng active
        const oldColumnIndex = orderedColumns.findIndex(
          (c) => c._id === active.id
        )
        //l·∫•y v·ªã tr√≠ m·ªõi t·ª´ th·∫≥ng over
        const newColumnIndex = orderedColumns.findIndex(
          (c) => c._id === over.id
        )
        //D√πng arrayMove c·ªßa dnd-kit ƒë·ªÉ s·∫Øp x·∫øp l·∫°i m·∫£ng Columns ban ƒë·∫ßu
        // code c·ªßa arrayMove :
        const dndOrderedColumns = arrayMove(
          orderedColumns,
          oldColumnIndex,
          newColumnIndex
        )
        // ƒê·ª£i x·ª≠ l√≠ g·ªçi API
        // const dndOrderedColumnsIds = dndOrderedColumns.map((c) => c._id)
        // console.log('üöÄ ~ handleDragEnd ~ dndOrderedColumnsIds:', dndOrderedColumnsIds)
        // console.log('üöÄ ~ handleDragEnd ~ dndOrderedColumns:', dndOrderedColumns)
        setOrderedColumns(dndOrderedColumns)
      }
    }
    // Nh·ªØng d·ªØ li·ªáu sau khi k√©o th·∫£ ph·∫£i ƒë∆∞a v·ªÅ gi√° tr·ªã null m·∫∑c ƒë·ªãnh ban ƒë·∫ßu
    setActiveDragItemId(null)
    setActiveDragItemType(null)
    setActiveDragItemData(null)
    setOldColumnWhenDraggingCard(null)
  }
  const customDropAnimation = {
    sideEffects: defaultDropAnimationSideEffects({
      styles: {
        active: {
          opacity: '0.5'
        }
      }
    })
  }
  // console.log('üöÄ ~ BoardContent ~ activeDragItemId:', activeDragItemId)
  // console.log('üöÄ ~ BoardContent ~ activeDragItemType:', activeDragItemType)
  // console.log('üöÄ ~ BoardContent ~ activeDragItemData:', activeDragItemData)

  return (
    <DndContext
      sensors={sensors}
      // Thu·∫≠t to√°n ph√°t hi·ªán va ch·∫°m (n·∫øu kh√¥ng c√≥ n√≥ th√¨ card v·ªõi cover l·ªõn s·∫Ω kh√¥ng k√©o qua Column ƒë∆∞·ª£c v√¨ n√≥ ƒëang b·ªã conflict gi·ªØa card v·ªõi column), chung ta s·∫Ω d√πng closestCorners thay v√¨ closestCenter
      collisionDetection={closestCorners}
      onDragStart={handleDragStart}
      onDragOver={handleDragOver}
      onDragEnd={handleDragEnd}
    >
      <Box
        sx={{
          bgcolor: (theme) =>
            theme.palette.mode === 'dark' ? '#34495e' : '#1976d2',
          width: '100%',
          height: (theme) => theme.trello.boardContentHeight,
          p: '10px 0'
        }}
      >
        <ListColumns columns={orderedColumns} />
        <DragOverlay dropAnimation={customDropAnimation}>
          {!activeDragItemType && null}
          {activeDragItemType === ACTIVE_DRAG_ITEM_TYPE.COLUMN && (
            <Column column={activeDragItemData} />
          )}
          {activeDragItemType === ACTIVE_DRAG_ITEM_TYPE.CARD && (
            <Card card={activeDragItemData} />
          )}
        </DragOverlay>
      </Box>
    </DndContext>
  )
}

export default BoardContent
